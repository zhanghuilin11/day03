多态性是面向对象中最重要的概念，在Java中有两种体现：
1、方法的重载（overload）【本类中的同名方法，体现相同名称方法实现不同的逻辑】
   方法的重写（overwrite）【子类对父类方法的覆盖，子类可以使用和父类相同的方法名，覆盖掉父类的逻辑】
   【父类的方法，想修改逻辑，但是又别的代码在调用父类的方法，可以考虑用子类继承父类，重写父类的方法】
2、对象的多态性----可以直接应用在抽象类和接口上
Java引用变量有两个类型，编译时类型和运行时类型。编译时类型由声明该变量时使用的类型决定，运行时类型由实际赋值给该变量的对象决定
若编译时类型和运行时类型不一致，就出现多态（Polymorphism）

多态性（2）
对象的多态--在Java中，子类的对象可以替代父类的对象使用
    一个变量值能有一种确定的数据类型
    一个引用变量类型可能指向（引用）多种不同类型的对象